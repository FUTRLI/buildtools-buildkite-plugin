#!/bin/bash

set -euo pipefail

# Path to this script
DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "$DIR/../lib/shared.bash"
# shellcheck source=lib/aws.bash
. "$DIR/../lib/aws.bash"
# shellcheck source=lib/docker.bash
. "$DIR/../lib/docker.bash"

echo "Add verbose argument to plugin to enable set -x and verbose mode"

verbose="$(plugin_read_list VERBOSE)"
export verbose
[[ -n ${verbose} ]] && set -x

# Work out what tasks to run
if [[ -n "$(plugin_read_list TASK)" ]] ; then
    task="$(plugin_read_list TASK)"
else
    echo "+++ Plugin error"
    echo "Missing task"
    exit 1
fi

if [[ -n "${BUILDKITE_COMMAND}" ]] ; then
    # Disable -e outside of the subshell; since the subshell returning a failure
    # would exit the parent shell (here) early.
    set +e

    (
        # Reset bash to the default IFS
        unset IFS

        while IFS= read -rd '' token; do
            [[ -n "$token" ]] && run_params+=("$token")
        done < <(xargs printf '%s\0' <<< "${BUILDKITE_COMMAND}")

        echo "+++ :docker: Running command >&2"
        exec "${run_params[@]}"
    )

    exitcode=$?

    # Restore -e as an option.
    set -e

    if [[ $exitcode -ne 0 ]]; then
        echo "Command failed"
        exit $exitcode
    fi
fi


# Find the task that matches the task
if [[ "${task}" ==  "build" ]] ; then
    # shellcheck source=tasks/build.bash
    . "$DIR/../tasks/build.bash"
else
    echo "+++ Buildtools plugin error"
    echo "No build or run options were specified"
    exit 1
fi
